// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Todo.Infra.Database.Contexts;

#nullable disable

namespace Todo.Infra.Database.Migrations
{
    [DbContext(typeof(TodoContext))]
    partial class TodoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Todo.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int?>("TodoItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TodoItemID"), 1L, 1);

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedIn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TodoItemID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("TodoItem", (string)null);
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Property<int?>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserID"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("UserID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Todo.Domain.Entities.UserPicture", b =>
                {
                    b.Property<int?>("UserPictureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserPictureID"), 1L, 1);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("PictureFromUserID")
                        .HasColumnType("int");

                    b.HasKey("UserPictureID");

                    b.HasIndex("PictureFromUserID")
                        .IsUnique()
                        .HasFilter("[PictureFromUserID] IS NOT NULL");

                    b.ToTable("UserPicture", (string)null);
                });

            modelBuilder.Entity("Todo.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("Todo.Domain.Entities.User", "CreatedBy")
                        .WithMany("TodoItems")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Todo.Domain.Entities.UserPicture", b =>
                {
                    b.HasOne("Todo.Domain.Entities.User", "User")
                        .WithOne("Picture")
                        .HasForeignKey("Todo.Domain.Entities.UserPicture", "PictureFromUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Todo.Domain.Entities.User", b =>
                {
                    b.Navigation("Picture")
                        .IsRequired();

                    b.Navigation("TodoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
